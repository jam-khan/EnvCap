metavar tvar, X, Y, Z ::= {{ com type variable name }}
metavar var, x, y, z, this ::= {{ com variable name }}
metavar label, l {{ tex \ell }} ::= {{ com label name }}

grammar

typ, A, B, C :: 't_' ::= {{ com types }}
  | int              ::  :: Int    {{ com top type }}
  | Bot              ::  :: bot    {{ com bottom type }} {{ tex \bot }}
  | Base             ::  :: base   {{ com base type }} {{ tex \mathbb{Z} }}
  | X                ::  :: var    {{ com type variable }}
  | A -> B           ::  :: arrow  {{ com function type }}
  | Forall X * A . B ::  :: all    {{ com universal type }} {{ tex \forall [[X]]\!*\![[A]].\;[[B]] }}
  | forall X * A . B ::  :: all_   {{ com universal type }}
  | { l : A }        ::  :: rcd    {{ com record type }}
  | A & B            ::  :: and    {{ com intersection type }}
  | A [ X ~> B ]     :: M:: subst
  | ( A )            :: S:: paren

ord, Aord {{ tex A^\circ }} , Bord {{ tex B^\circ }}, Cord {{ tex C^\circ }} :: 'ord_' ::= {{ com ordinary types }}
  | Int                 ::  :: Int
  | Bot                 ::  :: bot
  | Base                ::  :: base
  | X                   ::  :: var
  | A -> Bord           ::  :: arrow
  | Forall X * A . Bord ::  :: all
  | { l : Aord }        ::  :: rcd

exp, e :: 'e_' ::= {{ com expressions }}
  | {}               ::  :: top    {{ com top value }}
  | b                ::  :: base   {{ com base literal }} {{ tex n }}
  | x                ::  :: var    {{ com variable }}
  | fix x : A . e    ::  :: fix    {{ com fixpoint }} {{ tex [[fix]]\,[[x]]\!:\![[A]].\;[[e]] }}
  | \ x : A . e : B  ::  :: abs    {{ com abstraction }} {{ tex [[\]][[x]]\!:\![[A]].\;[[e]]\!:\![[B]] }}
  | e1 e2            ::  :: app    {{ com application }}
  | /\ X * A . e : B ::  :: tabs   {{ com type abstraction }} {{ tex [[/\]][[X]]\!*\![[A]].\;[[e]]\!:\![[B]] }}
  | e A              ::  :: tapp   {{ com type application }}
  | { l = e }        ::  :: rcd    {{ com record }}
  | e . l            ::  :: proj   {{ com projection }}
  | e1 ,, e2         ::  :: merge  {{ com merging }} {{ tex [[e1]]\bbcomma[[e2]] }}
  | e : A            ::  :: anno   {{ com casting }}
  | x = e1; e2       ::  :: def    {{ com definition }}
  | e1 [ x ~> e2 ]   :: M:: subst
  | e  [ X ~> A ]    :: M:: tsubst
  | ( e )            :: S:: paren

val, v :: 'v_' ::= {{ com values }}
  | {}               ::  :: top
  | b                ::  :: base
  | \ x : A . e : B  ::  :: abs
  | /\ X * A . e : B ::  :: tabs
  | { l = v }        ::  :: rcd
  | v1 ,, v2         ::  :: merge

arg :: 'arg_' ::= {{ com arguments }}
  | v   ::  :: value
  | l   ::  :: label
  | A   ::  :: type

ctx, G {{ tex \Gamma }} :: 'ctx_' ::= {{ com typing context }}
  | []              ::  :: empty  {{ tex \cdot }}
  | G , x : A       ::  :: cons
  | G , X * A       ::  :: tcons

mode {{ tex \Leftrightarrow }} :: '' ::= {{ com typing mode }}
  | =>              ::  :: Inf
  | <=              ::  :: Chk

terminals :: 'terminals_' ::=
  | \            ::  :: lambda     {{ tex \lambda }}
  | /\           ::  :: biglambda  {{ tex \Lambda }}
  | ~>           ::  :: subst      {{ tex \mapsto }}
  | ->           ::  :: arrow      {{ tex \rightarrow }}
  | >->          ::  :: stepalt    {{ tex \rightarrow }}
  | >->*         ::  :: stepmul    {{ tex \rightarrow^{*} }}
  | -->          ::  :: longarrow  {{ tex \hookrightarrow }}
  | ==>          ::  :: darrow     {{ tex \Downarrow }}
  | ~~>          ::  :: sarrow     {{ tex \, \rightsquigarrow \, }}
  | |->          ::  :: mapsto     {{ tex \longmapsto }}
  | <--          ::  :: leftarrow  {{ tex \leftarrow }}
  | <=           ::  :: check      {{ tex \Leftarrow }}
  | =>           ::  :: infer      {{ tex \Rightarrow }}
  | |-           ::  :: turnstile  {{ tex \vdash }}
  | |=           ::  :: dturnstile {{ tex \models }}
  | in           ::  :: in         {{ tex \in }}
  | forall       ::  :: forall     {{ tex \forall }}
  | ~            ::  :: consistent {{ tex \approx }}
  | &            ::  :: intersect  {{ tex \, \& \, }}
  | ,,           ::  :: merge      {{ tex \, ,\!, \, }}
  | .=.          ::  :: equiv      {{ tex \fallingdotseq }}
  | $            ::  :: apply      {{ tex \, \bullet \, }}
  | <|           ::  :: lhd        {{ tex \; \lhd \; }}
  | |>           ::  :: rhd        {{ tex \; \rhd \; }}
  | |            ::  :: pipe       {{ tex \; | \; }}

formula :: 'formula_' ::=
  | judgement             ::  :: judgement
  | not formula           :: M:: not       {{ tex \neg [[formula]] }}
  | formula1 or formula2  :: M:: or        {{ tex [[formula1]] \lor [[formula2]] }}
  | formula1 and formula2 :: M:: and       {{ tex [[formula1]] \land [[formula2]] }}
  | ( formula )           :: M:: brackets  {{ tex ([[formula]]) }}
  | << formula >>         :: M:: highlight {{ tex \colorbox{lightgray}{$[[formula]]$} }}
  | [ formula ]           :: M:: hide      {{ tex }}
  | uniq G                ::  :: uniqG     {{ tex }}
  | x : A in G            ::  :: inG
  | x notin fv e          ::  :: fresh
  | x notin dom G         ::  :: notInGx   {{ tex [[x]] \notin [[G]] }}
  | l1 <> l2              ::  :: labelNeq  {{ tex [[l1]] \neq [[l2]] }}
  | T1 = T2               ::  :: typEq
  | Ts = itoa | A |       ::  :: itoa      {{ com intersection to array of types }}
  | e1 --> i e2           :: M:: multistep {{ tex [[e1]]~[[-->]][[i]]~[[e2]] }}
  | G |- A * B            :: M:: disjointSpec
  | v1 ~ v2               :: M:: consistentSpec
  | A .=. B               :: M:: equivalent

parsing
  t_arrow <= t_and
  t_arrow right t_arrow

subrules
  val <:: exp
  ord <:: typ

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


defns
Algorithmics :: '' ::=

defn
toplike A :: :: toplike :: TL_
{{ com Top-like types }}
{{ tex \rceil [[A]] \lceil }}
by


---------------- :: Top
toplike Top


toplike A
toplike B
---------------- :: And
toplike A & B


toplike B
---------------- :: Arrow
toplike A -> B


toplike B
--------------------- :: All
toplike Forall X*A. B


toplike A
---------------- :: Rcd
toplike {l:A}



defn
split A B C :: :: spl :: Sp_
{{ com Splittable types }}
{{ tex [[B]] \lhd\,[[A]]\,\rhd [[C]] }}
by


-------------------:: And
split A&B A B


split B B1 B2
----------------------------- :: Arrow
split A->B A->B1 A->B2


split B B1 B2
---------------------------------------------------- :: All
split  Forall X*A. B  Forall X*A. B1  Forall X*A. B2


split A A1 A2
----------------------------- :: Rcd
split {l:A} {l:A1} {l:A2}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


defns
Subtyping :: '' ::=

defn
A <: B :: :: sub :: Sub_
{{ com Subtyping }}
by


toplike Bord
--------------- :: Top
A <: Bord


--------------- :: Bot
Bot <: Aord


--------------- :: Base
Base <: Base


B1 <: A1
A2 <: Bord2
------------------------ :: Arrow
A1 -> A2 <: B1 -> Bord2


B1 <: A1
A2 <: Bord2
------------------------------------- :: All
Forall X*A1. A2 <: Forall X*B1. Bord2


A <: Bord
------------------------ :: Rcd
{l:A} <: {l:Bord}


A <: Cord
------------------------- :: AndL
A & B <: Cord


B <: Cord
------------------------- :: AndR
A & B <: Cord


split B B1 B2
A <: B1
A <: B2
------------------------- :: Split
A <: B


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


defns
Typing :: '' ::=

defn
A |> B :: :: appdist :: AD_
{{ com Applicative distribution }}
{{ tex [[A]] \rhd [[B]] }}
by


---------------- :: Arrow
A -> B |> A -> B


----------------- :: TopArrow
Top |> Top -> Top


A |> A1 -> A2
B |> B1 -> B2
--------------------------- :: AndArrow
A & B |> A1 & B1 -> A2 & B2


------------------------------ :: All
Forall X*A. B |> Forall X*A. B


------------------------ :: TopAll
Top |> Forall X*Top. Top


A |> Forall X*A1. A2
B |> Forall X*B1. B2
-------------------------------- :: AndAll
A & B |> forall X * A1&B1. A2&B2


------------------ :: Rcd
{l : A} |> {l : A}


---------------- :: TopRcd
Top |> {l : Top}


A |> {l : A'}
B |> {l : B'}
---------------------- :: AndRcd
A & B |> {l : A' & B'}



defn
G |- e mode A :: :: typing :: Typ_
{{ com Bidirectional typing }}
by


uniq G
----------------- :: Top
G |- {} => Top


uniq G
----------------- :: Base
G |- b => Base


uniq G
x : A in G
----------------- :: Var
G |- x => A


G , x : A |- e <= A
------------------------------------------- :: Fix
G |- fix x : A . e => A


G , x : A |- e <= B
------------------------------------------- :: Abs
G |- \x : A . e : B => A->B


G |- e1 => A
A |> B -> C
G |- e2 <= B
----------------------- :: App
G |- e1 e2 => C


G , X * A |- e <= B
------------------------------------------- :: TAbs
G |- /\ X * A. e : B => Forall X * A. B


G |- e => B
B |> Forall X*C1. C2
G |- A * C1
----------------------- :: TApp
G |- e A => C2 [X~>A]


G |- e => A
----------------------- :: Rcd
G |- {l=e} => {l:A}


G |- e => A
A |> {l:B}
----------------------- :: Proj
G |- e.l => B


G |- e1 => A
G |- e2 => B
G |- A * B
------------------------------ :: Merge
G |- e1 ,, e2 => A & B


uniq G
[] |- v1 => A
[] |- v2 => B
v1 ~ v2
------------------------------ :: MergeV
G |- v1 ,, v2 => A & B


G |- e <= A
--------------------- :: Anno
G |- e:A => A


G |- e => A
A <: B
--------------------- :: Sub
G |- e <= B


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


defns
Semantics :: '' ::=

defn
v --> A v' :: :: casting :: Cast_
{{ com Type casting }}
{{ tex [[v]]\;[[-->]]_{[[A]]}\;[[v']] }}
by


toplike Aord
--------------------- :: Top
v  -->Aord  {}


--------------------- :: Base
b  -->Base  b


not toplike Bord2
B1 <: A1
A2 <: Bord2
--------------------------------------- :: Arrow
\x:A1.e:A2  -->B1->Bord2  \x:A1.e:Bord2


not toplike Bord2
B1 <: A1
A2 <: Bord2
----------------------------------------------------- :: All
/\ X*A1. e:A2  -->forall X*B1.Bord2  /\ X*A1. e:Bord2


not toplike Aord
v  -->Aord  v'
--------------------------------- :: Rcd
{l=v}  -->{l:Aord}  {l=v'}


v1  -->Aord  v1'
--------------------------------- :: MergeL
v1,,v2  -->Aord  v1'


v2  -->Aord  v2'
--------------------------------- :: MergeR
v1,,v2  -->Aord  v2'


split A A1 A2
v  -->A1  v1
v  -->A2  v2
--------------------------------- :: Split
v  -->A  v1,,v2



defn
v ; arg --> e :: :: papp :: PApp_
{{ com Parallel application }}
{{ tex [[v]]\,\bullet\,[[arg]]\;[[-->]]\;[[e]] }}
by


----------------- :: Top
{} ; arg  -->  {}


v  -->A  v'
------------------------------------ :: Abs
\x:A.e:B ; v  -->  e [ x ~> v' ] : B


------------------------------------------------- :: TAbs
/\ X*A. e:B ; C  -->  e [ X ~> C ] : B [ X ~> C ]


------------------- :: Rcd
{l=v} ; l  -->  v


v1 ; arg  -->  e1
v2 ; arg  -->  e2
------------------------- :: Merge
v1,,v2 ; arg  -->  e1,,e2



defn
e --> e' :: :: step :: Step_
{{ com Small-step operational semantics }}
{{ tex [[e]]\;[[-->]]\;[[e']] }}
by


----------------------------------------------------- :: Fix
fix x : A . e  -->  e [ x ~> fix x : A . e ] : A


v1 ; v2  -->  e
---------------- :: PApp
v1 v2  -->  e


v ; A  -->  e
---------------- :: PTApp
v A  -->  e


v ; l  -->  e
---------------- :: PProj
v.l  -->  e


v  -->A  v'
---------------- :: Cast
v : A  -->  v'


e1  -->   e1'
------------------------------------- :: AppL
e1 e2  -->  e1' e2


e2  -->  e2'
------------------------------------- :: AppR
v1 e2  -->  v1 e2'


e  -->  e'
------------------------------------- :: TApp
e A  -->  e' A


e  -->  e'
------------------------------------- :: Rcd
{l=e}  -->  {l=e'}


e  -->  e'
------------------------------------- :: Proj
e.l  -->  e'.l


e1  -->  e1'
e2  -->  e2'
------------------------------------- :: Merge
e1 ,, e2  -->  e1' ,, e2'


e1  -->  e1'
------------------------------------- :: MergeL
e1 ,, e2  -->  e1' ,, e2


e2  -->  e2'
------------------------------------- :: MergeR
v1 ,, e2  -->  v1 ,, e2'


e  -->  e'
------------------------------------- :: Anno
e : A  -->  e' : A