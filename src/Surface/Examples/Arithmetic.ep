


let x : Int = 1 + 2;
let y : Int = 1 + 2;

-- Single-line comments 
{-- 
    Multi-line comments

--}

-- Declaration
declare x : Int;
declare y : Int;

-- Assignment
x = 10;
y = 13;

-- Let bindings

let a : Int = x + y; # Addition
let b : Int = x - y; # Subtraction
let c : Int = x * y; # Multiplication
let c : Int = x / y; # Division
let d : Int = x % y; # Modulus

-- Let bindings with arguments

let a (n1 : Int) (n2 : Int) : Int = n1 + n2;

-- Recursion

letrec fib (n : Int) : Int = if n <= 1 then n else fib (n - 1) + fib (n - 2); 

-- abstractions

let fib : Int -> Int = \x:Int -> x + 1


-- modules
-- Example 1

module Constant
import nothing
export x : Int
begin
    x : Int = 3;
end

module Function
import Constant (x : Int)
export f : Int -> Int, z : Int
begin
    let f : Int -> Int = \y:Int -> y + x;
    let z : Int = f x;
end.

-- Example 2

restrict module IOUtils
import nothing
export print : String -> Void -- This also acts like a declaration/definition
begin
    print : String -> Void = \s:String -> println s;
    ...
end

restrict module ListUtils
import IOUtils (print : String -> Void)
export sort : [Int] -> [Int], printLst : [Int] -> Void
begin
    sort : [Int] -> [Int] = 
        \s : [Int] -> case s of
                        (nil)       ->  nil
                        (x:xs)      ->  if (head xs) < x 
                                        then (head xs):(sort x:(rest xs))
                                        else x : (sort xs);
    printLst : [Int] -> Void =
        \s : [Int] -> case s of
                        nil     -> void
                        (x:xs)  -> do 
                                    print (show x)
                                    printLst xs;
end

module Main
import ListUtils (sort : [Int] -> [Int], printLst : [Int] -> Void)
export printSorted : [Int] -> Void
begin
    printSorted : [Int] -> Void = printLst . sort
    main : Void = printSorted([2, 1, 3])
end

