@resource module Listutils

function isEmpty(ls : [Int]) : Bool {
    match ls of
        case []         => { True }
        case (x:xs)     => { False }
};

function head(ls: [Int]) : Int {
    match ls of
        case []         => { 0 }
        case (x : xs)   => { x }
};

function rest(ls: [Int]) : [Int] {
    match ls of
        case []         => { []<Int> }
        case (x : xs)   => { xs }
};

function length(ls: [Int]) : [Int] {
    match ls of
        case []         => { 0 }
        case (x:xs)     => { 1 + lengthLsInt(xs) }
};

function append(ls: [Int], v: Int) : [Int] {
    match ls of
        case []         => { [v]<Int> }
        case (x : xs)   => { appendInt(xs, v) }
};

function reverse(ls: [Int]) : [Int] {
    match ls of
        case []         => { []<Int> }
        case (x: xs)    => { 
            let { ys : [Int] = reverse(xs) } in { append(ys, x) } 
        }
};

function last(ls: [Int]) : Int {
    match ls of
        case []         => { 0 }
        case (x : xs)   => 
        {   match xs of
                case []         => { x }
                case (y: ys)    => { last(xs) }  
        }
};


function nth(n: Int, ls: [Int]) : Int {
    match ls of
        case []             => { 0 }
        case (x : xs)       => {
            if (n == 0) then x else nth(n - 1, xs)
        }
};

let addFront = \(n: Int, ls: [Int]) => { reverse(append(reverse(ls), n)) };

function concat(lsx: [Int], lsy: [Int]) : [Int] {
    match lsx of
        case []     => { lsy }
        case (x:xs) => { addFront(x, concat(xs, lsy)) }
};

function take(n: Int, ls: [Int]) : [Int] {
    if (n == 0) 
        then []<Int>
        else match ls of
                case []     => { []<Int> }
                case (x:xs) => { concat([x]<Int>, take(n - 1, xs)) }
};

let drop = \(n: Int, ls: [Int]) => { reverse(take(length(ls) - n, reverse(n))) };

function map(f: Int -> Int, ls: [Int]) : [Int] {
    match ls of
        case []      => { []<Int> }
        case (x:xs)  => { concat([f(x)]<Int>, map(f, xs)) }
};

function filter(pred: Int -> Int, ls: [Int]) : [Int] {
    match ls of
        case []     => { []<Int> }
        case (x:xs) => { 
            if      (pred(x) == True)
            then    add(x, filter(pred, xs))
            else    filter(pred, xs)
        }
};

function foldl(f: Int -> Int -> Int, init: Int, ls: [Int]) : Int {
        match ls of
            case []         => { init }
            case (x:xs)     => { foldl(f, f(init, x), xs) }
};

function foldr(f: Int -> Int -> Int, init: Int, ls: [Int]) : Int {
        match ls of
            case []         => { init }
            case (x:xs)     => { f(x, foldr(f, init, xs)) }
};

function any(pred: Int -> Bool, ls: [Int]) : Bool {
    match ls of
        case []         => { False }
        case (x:xs)     => { (pred(x) == True) || any(pred, xs) }
};

let all = \(pred: Int -> Bool, ls: [Int]) => {
    foldl(\(x:Int, acc: Bool) => { x && acc}, True, ls)
};

let contains = \(elem: Int, ls: [Int]) => {
    foldl(\(x: Int, acc: Bool) => { (elem == x) || acc }, False, ls)
};

function repeat(elem: Int, n: Int) : [Int] {
    if (n == 0)
        then []<Int>
        else addFront(elem, repeat(elem, n - 1))
};

function range(start: Int, end: Int) : [Int] {
    if (start > end) 
        then []<Int>
        else addFront(start, range(start + 1, end))
}