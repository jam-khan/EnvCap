@pure

val x = 20;

let {
    utils : Sig[Int, {total: (Int -> Int), getDiff: Int}] 
        = struct (diff: Int) { 
            function total(n:Int) : Int { 
                if (n < 0) 
                        then { 0 }
                        else { n + total(n - diff) }
            };
            val getDiff = diff}
} in  {
    with ({"prevEnv" = env} ,, utils(2) ,, {"x" = 10})
        in  { val answerNew     = total(x);
              val answerPrev    = total(prevEnv.x);
              val diff  = getDiff
    }}