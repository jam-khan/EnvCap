type UTIL = {result: Int};

letrec {
        hiddenEvaluator : Sig[Int -> Int, UTIL] = struct (f: Int -> Int) {  val result = f(10)  };
        factorial : Int -> Int  = \(n:Int) => { if (n == 0) 
                                                    then { 1 }
                                                    else { n * factorial(n - 1) } };
        instance : UTIL         = hiddenEvaluator(factorial) }  in { instance.result }
