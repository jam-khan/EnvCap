type MATH = sig {
    val add : int -> int -> int,
    val multiply : int -> int -> int,
    val print_math_operations : unit -> unit
    (* New function that depends on Utils *)
};

type UTILS = sig {
    val print_list : int list -> unit
};

module Utils : UTILS;

module Math : MATH;

type PROGRAM = sig {
    val run : unit -> unit
};

type PROGRAM = sig {
    val run : unit -> unit
}

/* Option 1 */
module MakeProgram : functor (U : UTILS, M : MATH) -> PROGRAM

/* Option 2 */
module MakeProgram : UTILS -> MATH -> PROGRAM