@pure

import X;
require X: Int;

type Expression     = (Int, Int, Bool);

type Environments 
    =   EnvironmentOne  ( Expression )
    |   EnvironmentTwo  ( Expression )
    |   Nothing;

val temp = {Add ( (1,, 2,, False) )} as Environments;

val result = 
    match temp of 
        case (Add n m res)    => {
            n + m
        }
        case (Mult n m res)    => {
            m * m
        }
        case (Something n)  => {    n   }
