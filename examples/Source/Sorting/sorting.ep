--- sorting implementation ---

type Util = (
    lessthanEqual:      (Int, [Int]) -> [Int],
    greaterthan:        (Int, [Int]) -> [Int],
    merge:              ([Int], [Int]) -> [Int],
    split:              ((Int, [Int]) -> [Int], Int, [Int]) -> [Int]
);

type Sort = (mergesort: [Int] -> [Int]);

signature Sorting (
    util: Util
): Sort {

    defrec mergesort: [Int] -> [Int] = 
          \(xs: [Int]) => {
              case xs of
                []      -->   []
                (x:xs)  -->   mergesort(util.split(util.lessthanEqual, x, xs)) ++ mergesort(util.split(util.greaterthan, x, xs))
          };

}
