@pure
@resource
val x = 1;

module example (x: Int) {
    val y   = x + 1;
    val inc = 10
}

-- Implementation + Interfaces
-- Implementation

-- ENV is well-formed
-- It is records with merges
ENV(?.E1:A1, .., En:An) ==> A1 & ... & An ~~> (?.e1, .., ?.e2)

ENV(...) |> {"File1" = ...},,
ENV(.. File1 ..) |> {"File2" = ...}

~~> Core
unit            |> {"File1" = ...},,    ~~~> File1.epc
{"File1" = ...} |> {"File2" = ...}      ~~~> File2.epc

~~> Linking rules
--     v |- e1 ~~> e1'
-- ----------------------
-- e1 ,, e2 ~~> e1' ,, e2'

-- -------------------------------
    v |- ?.e1 ~~~> lookupv(v, e1)

import (E1:A1, .., E2:An) E2 ~~~> ENV(?.E1:A1, .., En:An) |> E2
-- import "file1: pure, "file2: pure";              -- Linking allowed
unit |>
-- require x: Int, "file4: resource";    -- Linking not allowed but typechecking YES
--  @pure -- sugar/example
-- ...

-- Options:
-- 