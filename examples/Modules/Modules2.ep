@pure module temp

function getFunction(m: Sig[Int, {y : Int, f : Int -> Int}]): Int -> Int {
    
    ( \(applied: {y : Int, f : Int -> Int}) => { applied.f } )( m(20) )
};

functor moduleOne(x: Int) : {y : Int, f : Int -> Int} {
    let y = x + 1;
    function f(n : Int) : Int {
        if (n == 0) then {
            0
        } else {
            n + f(n - 1)
        }
    }
};

let moduleTwo = 
    struct (x: Int) {
        val y = x + 1;
        function f(n : Int) : Int {
            if (n == 0) then {
                1
            } else {
                n * f(n - 1)
            }
        }
    };


let sumResult   = let { f : Int -> Int = getFunction(moduleOne) } in { f(10) };
let fibResult   = let { f : Int -> Int = getFunction(moduleTwo) } in { f(10) }