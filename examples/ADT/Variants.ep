@resource

import TyAliases;

type Day    = Monday 
            | Tuesday 
            | Wednesday 
            | Thursday 
            | Friday 
            | Weekend Int (Int -> String);

val res = 
        match ({Weekend 10 (\(x:Int) => { "Whynot" })} as Day) 
            of  case Monday             => { "Monday" }
                case Tuesday            => { "Tuesday" }
                case Wednesday          => { "Wednesday" }
                case Thursday           => { "Thursday" }
                case Friday             => { "Friday" }
                case (Weekend n msg)    => { msg(1) }


type Expr = Add Expr Expr | Mult Expr Expr | Val Int;
type Tree = Node Tree Tree | Root Int;



function eval(e: Expr) : Int {
    match Expr of
        case (Add e1 e2)    => {eval(e1) + eval(e2)}
}